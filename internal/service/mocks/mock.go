// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	jwt_go "github.com/dgrijalva/jwt-go"
	gomock "github.com/golang/mock/gomock"
	repository "github.com/lavatee/mafia/internal/repository"
)

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// HashPassword mocks base method.
func (m *MockAuth) HashPassword(password string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].(string)
	return ret0
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockAuthMockRecorder) HashPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockAuth)(nil).HashPassword), password)
}

// NewToken mocks base method.
func (m *MockAuth) NewToken(claims jwt_go.MapClaims) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewToken", claims)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewToken indicates an expected call of NewToken.
func (mr *MockAuthMockRecorder) NewToken(claims interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewToken", reflect.TypeOf((*MockAuth)(nil).NewToken), claims)
}

// Refresh mocks base method.
func (m *MockAuth) Refresh(token string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Refresh indicates an expected call of Refresh.
func (mr *MockAuthMockRecorder) Refresh(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockAuth)(nil).Refresh), token)
}

// SignIn mocks base method.
func (m *MockAuth) SignIn(email, password string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", email, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignIn indicates an expected call of SignIn.
func (mr *MockAuthMockRecorder) SignIn(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockAuth)(nil).SignIn), email, password)
}

// SignUp mocks base method.
func (m *MockAuth) SignUp(email, name, password string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", email, name, password)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockAuthMockRecorder) SignUp(email, name, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockAuth)(nil).SignUp), email, name, password)
}

// MockRooms is a mock of Rooms interface.
type MockRooms struct {
	ctrl     *gomock.Controller
	recorder *MockRoomsMockRecorder
}

// MockRoomsMockRecorder is the mock recorder for MockRooms.
type MockRoomsMockRecorder struct {
	mock *MockRooms
}

// NewMockRooms creates a new mock instance.
func NewMockRooms(ctrl *gomock.Controller) *MockRooms {
	mock := &MockRooms{ctrl: ctrl}
	mock.recorder = &MockRoomsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRooms) EXPECT() *MockRoomsMockRecorder {
	return m.recorder
}

// MockFriends is a mock of Friends interface.
type MockFriends struct {
	ctrl     *gomock.Controller
	recorder *MockFriendsMockRecorder
}

// MockFriendsMockRecorder is the mock recorder for MockFriends.
type MockFriendsMockRecorder struct {
	mock *MockFriends
}

// NewMockFriends creates a new mock instance.
func NewMockFriends(ctrl *gomock.Controller) *MockFriends {
	mock := &MockFriends{ctrl: ctrl}
	mock.recorder = &MockFriendsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFriends) EXPECT() *MockFriendsMockRecorder {
	return m.recorder
}

// AddFriend mocks base method.
func (m *MockFriends) AddFriend(userId, friendId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFriend", userId, friendId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFriend indicates an expected call of AddFriend.
func (mr *MockFriendsMockRecorder) AddFriend(userId, friendId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFriend", reflect.TypeOf((*MockFriends)(nil).AddFriend), userId, friendId)
}

// DeleteFriend mocks base method.
func (m *MockFriends) DeleteFriend(userId, friendId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFriend", userId, friendId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFriend indicates an expected call of DeleteFriend.
func (mr *MockFriendsMockRecorder) DeleteFriend(userId, friendId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFriend", reflect.TypeOf((*MockFriends)(nil).DeleteFriend), userId, friendId)
}

// GetFriends mocks base method.
func (m *MockFriends) GetFriends(id int) ([]repository.MongoFriend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriends", id)
	ret0, _ := ret[0].([]repository.MongoFriend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFriends indicates an expected call of GetFriends.
func (mr *MockFriendsMockRecorder) GetFriends(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriends", reflect.TypeOf((*MockFriends)(nil).GetFriends), id)
}

// MockFriendshipRequests is a mock of FriendshipRequests interface.
type MockFriendshipRequests struct {
	ctrl     *gomock.Controller
	recorder *MockFriendshipRequestsMockRecorder
}

// MockFriendshipRequestsMockRecorder is the mock recorder for MockFriendshipRequests.
type MockFriendshipRequestsMockRecorder struct {
	mock *MockFriendshipRequests
}

// NewMockFriendshipRequests creates a new mock instance.
func NewMockFriendshipRequests(ctrl *gomock.Controller) *MockFriendshipRequests {
	mock := &MockFriendshipRequests{ctrl: ctrl}
	mock.recorder = &MockFriendshipRequestsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFriendshipRequests) EXPECT() *MockFriendshipRequestsMockRecorder {
	return m.recorder
}

// MockPlayersInRoom is a mock of PlayersInRoom interface.
type MockPlayersInRoom struct {
	ctrl     *gomock.Controller
	recorder *MockPlayersInRoomMockRecorder
}

// MockPlayersInRoomMockRecorder is the mock recorder for MockPlayersInRoom.
type MockPlayersInRoomMockRecorder struct {
	mock *MockPlayersInRoom
}

// NewMockPlayersInRoom creates a new mock instance.
func NewMockPlayersInRoom(ctrl *gomock.Controller) *MockPlayersInRoom {
	mock := &MockPlayersInRoom{ctrl: ctrl}
	mock.recorder = &MockPlayersInRoomMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayersInRoom) EXPECT() *MockPlayersInRoomMockRecorder {
	return m.recorder
}

// MockSuperpowers is a mock of Superpowers interface.
type MockSuperpowers struct {
	ctrl     *gomock.Controller
	recorder *MockSuperpowersMockRecorder
}

// MockSuperpowersMockRecorder is the mock recorder for MockSuperpowers.
type MockSuperpowersMockRecorder struct {
	mock *MockSuperpowers
}

// NewMockSuperpowers creates a new mock instance.
func NewMockSuperpowers(ctrl *gomock.Controller) *MockSuperpowers {
	mock := &MockSuperpowers{ctrl: ctrl}
	mock.recorder = &MockSuperpowersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSuperpowers) EXPECT() *MockSuperpowersMockRecorder {
	return m.recorder
}
